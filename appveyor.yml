# As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
clone_depth: 50

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

image: Visual Studio 2019

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
      MINGW_64: C:\rtools40\ucrt64\bin
      TEST_MODE: fast
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      WHEELHOUSE_UPLOADER_SECRET:
        secure:
            jIyaD+VWmTlDGXThsKAkiLq8iljgYHiriq+kEUuW9tHj67R5BapLxLjbfco2nt8Y
      BUILD_COMMIT: main
      DAILY_COMMIT: main

  matrix:
    - PYTHON: C:\Python310-x64
      PYTHON_VERSION: '3.10'
      PYTHON_ARCH: 64
      NUMPY_TEST_DEP: 1.22.3

# FIXME: commented out for initial testing
#    - PYTHON: C:\Python39-x64
#      PYTHON_VERSION: 3.9
#      PYTHON_ARCH: 64
#
#    - PYTHON: C:\Python38-x64
#      PYTHON_VERSION: 3.8
#      PYTHON_ARCH: 64

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""
  - ps: >-
      if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
        $env:CONTAINER = "pre-release"
        if ($env:DAILY_COMMIT) { $env:BUILD_COMMIT = $env:DAILY_COMMIT }
        $env:NPY_RELAXED_STRIDES_DEBUG = 1
      } else {
        $env:CONTAINER = "wheels"
        $env:UPLOAD_ARGS = "--no-update-index"
      }

install:
  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "List Program Files:"
  - dir "C:\Program Files (x86)\"

  # install MinGW-w64
  - choco install -y rtools --no-progress

  - git submodule update --init

  # Install new Python if necessary
  - ps: .\multibuild\install_python.ps1

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Get needed submodules
  - git submodule update --init scipy

  # Check out the commit or tag that we want to build
  - ps: |
      cd scipy
      git checkout $env:BUILD_COMMIT
      cd ..

  # Download and install static "openblas.a"
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      $PYTHON = $env:PYTHON

      choco install unzip -y
      $source = "https://github.com/scipy/scipy-ci-artifacts/raw/main/openblas_32_if.zip"
      $destination = Join-Path -Path $pwd -ChildPath 'openblas_32_if.zip'
      (New-Object Net.WebClient).DownloadFile($source, $destination)
      unzip -d c:\ openblas_32_if.zip
      $env:PKG_CONFIG_PATH = "c:\opt\openblas\if_32\64\lib\pkgconfig;"

  # Upgrade to the latest pip, and install the `build` package
  - python -m pip install -U pip build

build_script:
  # we use a distribution file to assist in loading DLLs
  - ps: |
      $cwd = Get-Location
      ls $cwd
      ls $cwd/scipy
      ls $cwd/scipy/scipy
      rm -Force $cwd/scipy/scipy/_distributor_init.py
      cp $cwd/_distributor_init.py $cwd/scipy/scipy/
      cd scipy
  # Append license text relevant for the built wheel
  - type ..\LICENSE_win32.txt >> LICENSE.txt
  # Build wheel using meson-python
  - ps: |
      $PYTHON_ARCH = $env:PYTHON_ARCH
      $PKG_CONFIG_PATH = $env:PKG_CONFIG_PATH
      $MINGW = $env:MINGW_64
      $env:Path += ";$MINGW"
  - git submodule update --init
  - python -m build --wheel
  - ps: |
      # Upload artifact to Appveyor immediately after build
      ls dist -r | Foreach-Object {
          appveyor PushArtifact $_.FullName
          pip install $_.FullName
      }

before_test:
  # Install test requirements.
  - python -m pip install numpy pytest pytest-xdist pytest-faulthandler pytest-env Pillow mpmath matplotlib

test_script:
  - cd ..
  - mkdir tmp_test
  - cd tmp_test
  - python ..\check_installed_package.py
  - python ..\run_scipy_tests.py %TEST_MODE% -- -n6 --junitxml=%cd%\junit-results.xml -rfEX

after_test:
  - cd ..
  - ls scipy\dist
  - python verify_init.py scipy\dist
  - cd tmp_test
  # Upload test results to Appveyor
  - ps: |
      If (Test-Path .\junit-results.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\junit-results.xml)
        )
      }
      $LastExitCode = 0

  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

on_success:
  # Upload the generated wheel package to anaconda.org
  # SCIPY_STAGING_UPLOAD_TOKEN is an encrypted variable
  # used in Appveyor CI config, originally created at
  # multibuild-wheels-staging site
  - cd ..\scipy
  - cmd: set ANACONDA_ORG="multibuild-wheels-staging"
  - pip install git+https://github.com/Anaconda-Platform/anaconda-client.git@ce89e4351eef
  - IF NOT "%SCIPY_STAGING_UPLOAD_TOKEN%" == "" anaconda -t %SCIPY_STAGING_UPLOAD_TOKEN% upload --force -u %ANACONDA_ORG% "dist\*.whl"
